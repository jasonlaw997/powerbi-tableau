[
    {
        "DISTINCTCOUNT": "Syntax:\n                    DISTINCTCOUNT ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nThe number of distinct values in ColumnName. ",
        "COUNTX": "Syntax:\n                    COUNTX ( <Table>, <Expression> )                 \nReturn Values:\n(Scalar)   A single \nReturns the number of values that are non blank by iterating the provided table.",
        "COUNTAX": "Syntax:\n                    COUNTAX ( <Table>, <Expression> )                 \nReturn Values:\n(Scalar)   A single \nReturns the number of values that are non blank by iterating the provided table.",
        "MAX": "Syntax:\n                    MAX ( <ColumnNameOrScalar1> [, <Scalar2>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nLargest value found in the column or in the two expressions.",
        "AVERAGEA": "Syntax:\n                    AVERAGEA ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single value of one these types: \n",
        "AVERAGE": "Syntax:\n                    AVERAGE ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single value of one these types: \n",
        "DISTINCTCOUNTNOBLANK": "Syntax:\n                    DISTINCTCOUNTNOBLANK ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nThe number of distinct values in ColumnName, ignoring the blank value.",
        "MAXA": "Syntax:\n                    MAXA ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single value of any type.\nLargest value found in the column.",
        "APPROXIMATEDISTINCTCOUNT": "Syntax:\n                    APPROXIMATEDISTINCTCOUNT ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nThe approximate number of distinct values in ColumnName.",
        "COUNTROWS": "Syntax:\n                    COUNTROWS ( <Table> )                 \nReturn Values:\n(Scalar)   A single \nNumber of rows obtained by the evaluation of the table expression. If the table has no rows, it returns blank.",
        "COUNT": "Syntax:\n                    COUNT ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nReturns the number of cells in a column that contain a non blank value.",
        "COUNTBLANK": "Syntax:\n                    COUNTBLANK ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nIf no rows are found that meet the blank condition, the function returns blank.",
        "MIN": "Syntax:\n                    MIN ( <ColumnNameOrScalar1> [, <Scalar2>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nSmallest value found in the column or in the two expressions.",
        "COUNTA": "Syntax:\n                    COUNTA ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nReturns the number of cells in a column that contain a non blank value.",
        "SUM": "Syntax:\n                    SUM ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single value of any type.\nResult of the sum.",
        "MAXX": "Syntax:\n                    MAXX ( <Table>, <Expression> )                 \nReturn Values:\n(Scalar)   A single value of any type.\nLargest value found in the expression.",
        "SUMX": "Syntax:\n                    SUMX ( <Table>, <Expression> )                 \nReturn Values:\n(Scalar)   A single value of any type.\nResult of the sum.",
        "CALENDARAUTO": "Syntax:\n                    CALENDARAUTO (  [<FiscalYearEndMonth>] )                 \nReturn Values:\n(Table)   A table with a single column.\nReturns a table with a single column named “Date” containing a contiguous set of dates. The range of dates is calculated automatically based on data in the model.",
        "DATEVALUE": "Syntax:\n                    DATEVALUE ( <DateText> )                 \nReturn Values:\n(Scalar)   A single \nA date in datetime format. ",
        "DATEDIFF": "Syntax:\n                    DATEDIFF ( <Date1>, <Date2>, <Interval> )                 \nReturn Values:\n(Scalar)   A single \nThe count of interval boundaries crossed between two dates. ",
        "AVERAGEX": "Syntax:\n                    AVERAGEX ( <Table>, <Expression> )                 \nReturn Values:\n(Scalar)   A single value of one these types: \n",
        "EDATE": "Syntax:\n                    EDATE ( <StartDate>, <Months> )                 \nReturn Values:\n(Scalar)   A single \n",
        "PRODUCTX": "Syntax:\n                    PRODUCTX ( <Table>, <Expression> )                 \nReturn Values:\n(Scalar)   A single \nThe product of the Expression evaluated for each row in the Table.",
        "MINA": "Syntax:\n                    MINA ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single value of any type.\nSmallest value found in the column.",
        "EOMONTH": "Syntax:\n                    EOMONTH ( <StartDate>, <Months> )                 \nReturn Values:\n(Scalar)   A single \n",
        "MINUTE": "Syntax:\n                    MINUTE ( <Datetime> )                 \nReturn Values:\n(Scalar)   A single \nAn integer number from 0 to 59. ",
        "MONTH": "Syntax:\n                    MONTH ( <Date> )                 \nReturn Values:\n(Scalar)   A single \nAn integer number indicating the number of the month.",
        "NOW": "Syntax:\n                    NOW (  )                 \nReturn Values:\n(Scalar)   A single \nCurrent date and time.",
        "HOUR": "Syntax:\n                    HOUR ( <Datetime> )                 \nReturn Values:\n(Scalar)   A single \nAn integer number from 0 to 23. ",
        "CALENDAR": "Syntax:\n                    CALENDAR ( <StartDate>, <EndDate> )                 \nReturn Values:\n(Table)   A table with a single column.\nReturns a table with a single column named “Date” containing a contiguous set of dates. The range of dates is from the specified start date to the specified end date, inclusive of those two dates.",
        "SECOND": "Syntax:\n                    SECOND ( <Datetime> )                 \nReturn Values:\n(Scalar)   A single \nAn integer number from 0 to 59. ",
        "DAY": "Syntax:\n                    DAY ( <Date> )                 \nReturn Values:\n(Scalar)   A single \nAn integer number indicating the day of the month. ",
        "TIME": "Syntax:\n                    TIME ( <Hour>, <Minute>, <Second> )                 \nReturn Values:\n(Scalar)   A single \nReturns the specified time. ",
        "TIMEVALUE": "Syntax:\n                    TIMEVALUE ( <TimeText> )                 \nReturn Values:\n(Scalar)   A single \nA time in datetime format.",
        "DATE": "Syntax:\n                    DATE ( <Year>, <Month>, <Day> )                 \nReturn Values:\n(Scalar)   A single \nReturns the specified date. ",
        "UTCTODAY": "Syntax:\n                    UTCTODAY (  )                 \nReturn Values:\n(Scalar)   A single \nCurrent UTC date.",
        "YEARFRAC": "Syntax:\n                    YEARFRAC ( <StartDate>, <EndDate> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \nFraction of the year.",
        "MINX": "Syntax:\n                    MINX ( <Table>, <Expression> )                 \nReturn Values:\n(Scalar)   A single value of any type.\nSmallest value found in the expression.",
        "UTCNOW": "Syntax:\n                    UTCNOW (  )                 \nReturn Values:\n(Scalar)   A single \nCurrent UTC date and time.",
        "ALLCROSSFILTERED": "Syntax:\n                    ALLCROSSFILTERED ( <TableName> )                 ",
        "WEEKNUM": "Syntax:\n                    WEEKNUM ( <Date> [, <ReturnType>] )                 \nReturn Values:\n(Scalar)   A single \nThe week number for the given date.",
        "ALLEXCEPT": "Syntax:\n                    ALLEXCEPT ( <TableName>, <ColumnName> [, <ColumnName> [, … ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\n",
        "ALLNOBLANKROW": "Syntax:\n                    ALLNOBLANKROW ( <TableNameOrColumnName> [, <ColumnName> [, <ColumnName> [, … ] ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nThe result can include blank values if the table has blank values. The only blank that is not included in the result is the one added to the table in case of invalid relationships.",
        "CALCULATE": "Syntax:\n                    CALCULATE ( <Expression> [, <Filter> [, <Filter> [, … ] ] ] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nThe value is the result of the expression evaluated in a modified filter context.",
        "QUARTER": "Syntax:\n                    QUARTER ( <Date> )                 \nReturn Values:\n(Scalar)   A single \nAn integer number indicating the number of the quarter.",
        "PRODUCT": "Syntax:\n                    PRODUCT ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nThe product of the numbers in a column.",
        "YEAR": "Syntax:\n                    YEAR ( <Date> )                 \nReturn Values:\n(Scalar)   A single \nAn integer in the range 1900-9999. ",
        "KEEPFILTERS": "Syntax:\n                    KEEPFILTERS ( <Expression> )                 ",
        "FILTER": "Syntax:\n                    FILTER ( <Table>, <FilterExpression> )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table containing only the filtered rows.",
        "SELECTEDVALUE": "Syntax:\n                    SELECTEDVALUE ( <ColumnName> [, <AlternateResult>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nThe value when the context for ColumnName has been filtered down to one distinct value only. Else, AlternateResult. ",
        "AMORLINC": "Syntax:\n                    AMORLINC ( <Cost>, <Date_purchased>, <First_period>, <Salvage>, <Period>, <Rate> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "ACCRINT": "Syntax:\n                    ACCRINT ( <Issue>, <First_interest>, <Settlement>, <Rate>, <Par>, <Frequency> [, <Basis>] [, <Calc_method>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "COUPDAYBS": "Syntax:\n                    COUPDAYBS ( <Settlement>, <Maturity>, <Frequency> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "REMOVEFILTERS": "Syntax:\n                    REMOVEFILTERS (  [<TableNameOrColumnName>] [, <ColumnName> [, <ColumnName> [, … ] ] ] )                 ",
        "ACCRINTM": "Syntax:\n                    ACCRINTM ( <Issue>, <Maturity>, <Rate>, <Par> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "WEEKDAY": "Syntax:\n                    WEEKDAY ( <Date> [, <ReturnType>] )                 \nReturn Values:\n(Scalar)   A single \nAn integer number in a range 1-7 or 0-6 according to the choice of the ReturnType parameter.",
        "COUPDAYS": "Syntax:\n                    COUPDAYS ( <Settlement>, <Maturity>, <Frequency> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "COUPDAYSNC": "Syntax:\n                    COUPDAYSNC ( <Settlement>, <Maturity>, <Frequency> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "COUPNCD": "Syntax:\n                    COUPNCD ( <Settlement>, <Maturity>, <Frequency> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "LOOKUPVALUE": "Syntax:\n                    LOOKUPVALUE ( <Result_ColumnName>, <Search_ColumnName>, <Search_Value> [, <Search_ColumnName>, <Search_Value> [, … ] ] [, <Alternate_Result>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nThe value of Result_Column at the row where all pairs of Search_Column and Search_Value have a match. ",
        "COUPNUM": "Syntax:\n                    COUPNUM ( <Settlement>, <Maturity>, <Frequency> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "TODAY": "Syntax:\n                    TODAY (  )                 \nReturn Values:\n(Scalar)   A single \nCurrent date.",
        "ALL": "Syntax:\n                    ALL (  [<TableNameOrColumnName>] [, <ColumnName> [, <ColumnName> [, … ] ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\n",
        "CUMIPMT": "Syntax:\n                    CUMIPMT ( <Rate>, <Nper>, <Pv>, <Start_period>, <End_period>, <Type> )                 \nReturn Values:\n(Scalar)   A single \n",
        "DB": "Syntax:\n                    DB ( <Cost>, <Salvage>, <Life>, <Period> [, <Month>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "CALCULATETABLE": "Syntax:\n                    CALCULATETABLE ( <Table> [, <Filter> [, <Filter> [, … ] ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nThe value is the result of the expression evaluated in a modified filter context.",
        "COUPPCD": "Syntax:\n                    COUPPCD ( <Settlement>, <Maturity>, <Frequency> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "DISC": "Syntax:\n                    DISC ( <Settlement>, <Maturity>, <Pr>, <Redemption> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "DOLLARFR": "Syntax:\n                    DOLLARFR ( <Decimal_dollar>, <Fraction> )                 \nReturn Values:\n(Scalar)   A single \n",
        "DURATION": "Syntax:\n                    DURATION ( <Settlement>, <Maturity>, <Coupon>, <Yld>, <Frequency> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "FV": "Syntax:\n                    FV ( <Rate>, <Nper>, <Pmt> [, <Pv>] [, <Type>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "AMORDEGRC": "Syntax:\n                    AMORDEGRC ( <Cost>, <Date_purchased>, <First_period>, <Salvage>, <Period>, <Rate> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "IPMT": "Syntax:\n                    IPMT ( <Rate>, <Per>, <Nper>, <Pv> [, <Fv>] [, <Type>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "ISPMT": "Syntax:\n                    ISPMT ( <Rate>, <Per>, <Nper>, <Pv> )                 \nReturn Values:\n(Scalar)   A single \n",
        "NPER": "Syntax:\n                    NPER ( <Rate>, <Pmt>, <Pv> [, <Fv>] [, <Type>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "ODDFYIELD": "Syntax:\n                    ODDFYIELD ( <Settlement>, <Maturity>, <Issue>, <First_coupon>, <Rate>, <Pr>, <Redemption>, <Frequency> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "INTRATE": "Syntax:\n                    INTRATE ( <Settlement>, <Maturity>, <Investment>, <Redemption> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "ODDLPRICE": "Syntax:\n                    ODDLPRICE ( <Settlement>, <Maturity>, <Last_interest>, <Rate>, <Yld>, <Redemption>, <Frequency> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "PDURATION": "Syntax:\n                    PDURATION ( <Rate>, <Pv>, <Fv> )                 \nReturn Values:\n(Scalar)   A single \n",
        "EFFECT": "Syntax:\n                    EFFECT ( <Nominal_rate>, <Npery> )                 \nReturn Values:\n(Scalar)   A single \n",
        "ODDLYIELD": "Syntax:\n                    ODDLYIELD ( <Settlement>, <Maturity>, <Last_interest>, <Rate>, <Pr>, <Redemption>, <Frequency> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "DDB": "Syntax:\n                    DDB ( <Cost>, <Salvage>, <Life>, <Period> [, <Factor>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "CUMPRINC": "Syntax:\n                    CUMPRINC ( <Rate>, <Nper>, <Pv>, <Start_period>, <End_period>, <Type> )                 \nReturn Values:\n(Scalar)   A single \n",
        "PPMT": "Syntax:\n                    PPMT ( <Rate>, <Per>, <Nper>, <Pv> [, <Fv>] [, <Type>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "NOMINAL": "Syntax:\n                    NOMINAL ( <Effect_rate>, <Npery> )                 \nReturn Values:\n(Scalar)   A single \n",
        "PRICEMAT": "Syntax:\n                    PRICEMAT ( <Settlement>, <Maturity>, <Issue>, <Rate>, <Yld> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "MDURATION": "Syntax:\n                    MDURATION ( <Settlement>, <Maturity>, <Coupon>, <Yld>, <Frequency> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "PV": "Syntax:\n                    PV ( <Rate>, <Nper>, <Pmt> [, <Fv>] [, <Type>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "RECEIVED": "Syntax:\n                    RECEIVED ( <Settlement>, <Maturity>, <Investment>, <Discount> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "DOLLARDE": "Syntax:\n                    DOLLARDE ( <Fractional_dollar>, <Fraction> )                 \nReturn Values:\n(Scalar)   A single \n",
        "ODDFPRICE": "Syntax:\n                    ODDFPRICE ( <Settlement>, <Maturity>, <Issue>, <First_coupon>, <Rate>, <Yld>, <Redemption>, <Frequency> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "RRI": "Syntax:\n                    RRI ( <Nper>, <Pv>, <Fv> )                 \nReturn Values:\n(Scalar)   A single \n",
        "PRICE": "Syntax:\n                    PRICE ( <Settlement>, <Maturity>, <Rate>, <Yld>, <Redemption>, <Frequency> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "RATE": "Syntax:\n                    RATE ( <Nper>, <Pmt>, <Pv> [, <Fv>] [, <Type>] [, <Guess>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "SLN": "Syntax:\n                    SLN ( <Cost>, <Salvage>, <Life> )                 \nReturn Values:\n(Scalar)   A single \n",
        "PMT": "Syntax:\n                    PMT ( <Rate>, <Nper>, <Pv> [, <Fv>] [, <Type>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "TBILLYIELD": "Syntax:\n                    TBILLYIELD ( <Settlement>, <Maturity>, <Pr> )                 \nReturn Values:\n(Scalar)   A single \n",
        "XIRR": "Syntax:\n                    XIRR ( <Table>, <Values>, <Dates> [, <Guess>] )                 \nReturn Values:\n(Scalar)   A single \nInternal rate of return for the given inputs. If the calculation fails to return a valid result, an error is returned. ",
        "YIELD": "Syntax:\n                    YIELD ( <Settlement>, <Maturity>, <Rate>, <Pr>, <Redemption>, <Frequency> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "YIELDDISC": "Syntax:\n                    YIELDDISC ( <Settlement>, <Maturity>, <Pr>, <Redemption> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "TBILLPRICE": "Syntax:\n                    TBILLPRICE ( <Settlement>, <Maturity>, <Discount> )                 \nReturn Values:\n(Scalar)   A single \n",
        "CONTAINS": "Syntax:\n                    CONTAINS ( <Table>, <ColumnName>, <Value> [, <ColumnName>, <Value> [, … ] ] )                 \nReturn Values:\n(Scalar)   A single \n",
        "SYD": "Syntax:\n                    SYD ( <Cost>, <Salvage>, <Life>, <Per> )                 \nReturn Values:\n(Scalar)   A single \n",
        "CONTAINSSTRING": "Syntax:\n                    CONTAINSSTRING ( <WithinText>, <FindText> )                 \nReturn Values:\n(Scalar)   A single \nA value of TRUE if the string WithinText contains the string FindText – the comparison is not case-sensitive.",
        "XNPV": "Syntax:\n                    XNPV ( <Table>, <Values>, <Dates>, <Rate> )                 \nReturn Values:\n(Scalar)   A single \nNet present value. ",
        "CONTAINSSTRINGEXACT": "Syntax:\n                    CONTAINSSTRINGEXACT ( <WithinText>, <FindText> )                 \nReturn Values:\n(Scalar)   A single \nA value of TRUE if the string WithinText contains the string FindText – the comparison is case-sensitive.",
        "CUSTOMDATA": "Syntax:\n                    CUSTOMDATA (  )                 \nReturn Values:\n(Scalar)   A single \n",
        "HASONEFILTER": "Syntax:\n                    HASONEFILTER ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nTRUE when the number of directly filtered values on ColumnName is one; otherwise returns FALSE. ",
        "CONTAINSROW": "Syntax:\n                    CONTAINSROW ( <Table>, <Value> [, <Value> [, … ] ] )                 \nReturn Values:\n(Scalar)   A single \nA value of TRUE if a row of values exists in a table; otherwise, the function returns FALSE.",
        "VDB": "Syntax:\n                    VDB ( <Cost>, <Salvage>, <Life>, <Start_period>, <End_period> [, <Factor>] [, <No_switch>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "ISCROSSFILTERED": "Syntax:\n                    ISCROSSFILTERED ( <TableNameOrColumnName> )                 \nReturn Values:\n(Scalar)   A single \nTRUE when any column of the table specified or another column a related table is being filtered. Otherwise returns FALSE. ",
        "ISBLANK": "Syntax:\n                    ISBLANK ( <Value> )                 \nReturn Values:\n(Scalar)   A single \nA Boolean value of TRUE if the value is blank; otherwise FALSE. ",
        "ISERROR": "Syntax:\n                    ISERROR ( <Value> )                 \nReturn Values:\n(Scalar)   A single \nA Boolean value of TRUE if the value is an error; otherwise FALSE. ",
        "ISEVEN": "Syntax:\n                    ISEVEN ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nReturns TRUE if Number is even, or FALSE if number is odd. ",
        "HASONEVALUE": "Syntax:\n                    HASONEVALUE ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nTRUE when the context for ColumnName has been filtered down to one distinct value only. Otherwise is FALSE. ",
        "YIELDMAT": "Syntax:\n                    YIELDMAT ( <Settlement>, <Maturity>, <Issue>, <Rate>, <Pr> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "ISFILTERED": "Syntax:\n                    ISFILTERED ( <TableNameOrColumnName> )                 \nReturn Values:\n(Scalar)   A single \nTRUE when ColumnName is being filtered directly, or when any column of TableName is being filtered directly.",
        "ISINSCOPE": "Syntax:\n                    ISINSCOPE ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nReturns TRUE if the column is in included in the filter context and it is a grouping column for the current row in the result set.",
        "ISNONTEXT": "Syntax:\n                    ISNONTEXT ( <Value> )                 \nReturn Values:\n(Scalar)   A single \nTRUE if the value is not text or blank; FALSE if the value is text. ",
        "PRICEDISC": "Syntax:\n                    PRICEDISC ( <Settlement>, <Maturity>, <Discount>, <Redemption> [, <Basis>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "TBILLEQ": "Syntax:\n                    TBILLEQ ( <Settlement>, <Maturity>, <Discount> )                 \nReturn Values:\n(Scalar)   A single \n",
        "ISLOGICAL": "Syntax:\n                    ISLOGICAL ( <Value> )                 \nReturn Values:\n(Scalar)   A single \nTRUE if the value is a logical value; FALSE if any value other than TRUE or FALSE. ",
        "ISNUMBER": "Syntax:\n                    ISNUMBER ( <Value> )                 \nReturn Values:\n(Scalar)   A single \nTRUE if the value is numeric; otherwise FALSE. ",
        "ISAFTER": "Syntax:\n                    ISAFTER ( <Value1>, <Value2> [, [<Order>] [, <Value1>, <Value2> [, [<Order>] [, … ] ] ] ] )                 \nReturn Values:\n(Scalar)   A single \nReturns TRUE when the set of values passed as arguments in Value1 is “greater than” the set of values passed as arguments in Value2.",
        "ISODD": "Syntax:\n                    ISODD ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nReturns TRUE if number is odd, or FALSE if number is even. ",
        "ISSELECTEDMEASURE": "Syntax:\n                    ISSELECTEDMEASURE ( <Measure> [, <Measure> [, … ] ] )                 \nReturn Values:\n(Scalar)   A single \nTrue whether the measure that is currently in context is one of those specified in the list of parameters.",
        "ISONORAFTER": "Syntax:\n                    ISONORAFTER ( <Value1>, <Value2> [, [<Order>] [, <Value1>, <Value2> [, [<Order>] [, … ] ] ] ] )                 \nReturn Values:\n(Scalar)   A single \nReturns TRUE when the set of values passed as arguments in Value1 is “greater than or equal to” the set of values passed as arguments in Value2.",
        "SELECTEDMEASUREFORMATSTRING": "Syntax:\n                    SELECTEDMEASUREFORMATSTRING (  )                 \nReturn Values:\n(Scalar)   A single \n",
        "ISTEXT": "Syntax:\n                    ISTEXT ( <Value> )                 \nReturn Values:\n(Scalar)   A single \nTRUE if the value is text; otherwise FALSE.",
        "ISEMPTY": "Syntax:\n                    ISEMPTY ( <Table> )                 \nReturn Values:\n(Scalar)   A single \nTRUE if the table is empty (has no rows), if else, FALSE. ",
        "SELECTEDMEASURENAME": "Syntax:\n                    SELECTEDMEASURENAME (  )                 \nReturn Values:\n(Scalar)   A single \nReturns the name of the measure evaluated.",
        "ISSUBTOTAL": "Syntax:\n                    ISSUBTOTAL ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nReturns TRUE if the current row contains a subtotal for a specified column and FALSE otherwise.",
        "USEROBJECTID": "Syntax:\n                    USEROBJECTID (  )                 \nReturn Values:\n(Scalar)   A single \nIt is the security identifier (SID) in Windows, and another identifier in the Power BI or Azure Analysis Services service.",
        "USERPRINCIPALNAME": "Syntax:\n                    USERPRINCIPALNAME (  )                 \nReturn Values:\n(Scalar)   A single \nReturns the name of the user as their email address, aka user@domain.com.",
        "USERNAME": "Syntax:\n                    USERNAME (  )                 \nReturn Values:\n(Scalar)   A single \nThe username from the credentials given to the system at connection time.",
        "FALSE": "Syntax:\n                    FALSE (  )                 \nReturn Values:\n(Scalar)   A single \nAlways FALSE.",
        "IFERROR": "Syntax:\n                    IFERROR ( <Value>, <ValueIfError> )                 \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar of the same type as Value",
        "IF": "Syntax:\n                    IF ( <LogicalTest>, <ResultIfTrue> [, <ResultIfFalse>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nEither ResultIfTrue or ResultIfFalse expression result, depending on LogicalTest.",
        "COALESCE": "Syntax:\n                    COALESCE ( <Value1>, <Value2> [, <Value2> [, … ] ] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nThe first Value argument that is not blank.",
        "TRUE": "Syntax:\n                    TRUE (  )                 \nReturn Values:\n(Scalar)   A single \nAlways TRUE.",
        "ACOS": "Syntax:\n                    ACOS ( <Number> )                 \nReturn Values:\n(Scalar)   A single \n",
        "OR": "Syntax:\n                    OR ( <Logical1>, <Logical2> )                 \nReturn Values:\n(Scalar)   A single \nThe value is TRUE if any of the two arguments is TRUE; the value is FALSE if both the arguments are FALSE. ",
        "ACOT": "Syntax:\n                    ACOT ( <Number> )                 \nReturn Values:\n(Scalar)   A single \n",
        "SWITCH": "Syntax:\n                    SWITCH ( <Expression>, <Value>, <Result> [, <Value>, <Result> [, … ] ] [, <Else>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar value coming from one of the Result expressions, if there was a match with Value, or from the Else expression, if there was no match with any Value. ",
        "ASIN": "Syntax:\n                    ASIN ( <Number> )                 \nReturn Values:\n(Scalar)   A single \n",
        "NOT": "Syntax:\n                    NOT ( <Logical> )                 \nReturn Values:\n(Scalar)   A single \nTRUE or FALSE",
        "ABS": "Syntax:\n                    ABS ( <Number> )                 \nReturn Values:\n(Scalar)   A single value of one these types: \n",
        "ATAN": "Syntax:\n                    ATAN ( <Number> )                 \nReturn Values:\n(Scalar)   A single \n",
        "CEILING": "Syntax:\n                    CEILING ( <Number>, <Significance> )                 \nReturn Values:\n(Scalar)   A single value of one these types: \nThe number is rounded as specified. The return data type is usually of the same type of the significant argument, with the following exceptions:",
        "USERCULTURE": "Syntax:\n                    USERCULTURE ( )                \nReturn Values:\n(Scalar)   A single \nThe culture code as a string, such as “en-US”.",
        "CONVERT": "Syntax:\n                    CONVERT ( <Expression>, <DataType> )                 \nReturn Values:\n(Scalar)   A single value of any type.\nThe value of the Expression converted to the desired DataType.",
        "COT": "Syntax:\n                    COT ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nReturn the cotangent of an angle specified in radians. ",
        "ASINH": "Syntax:\n                    ASINH ( <Number> )                 \nReturn Values:\n(Scalar)   A single \n",
        "COS": "Syntax:\n                    COS ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nReturns the cosine of the given angle. ",
        "IF.EAGER": "Syntax:\n                    IF.EAGER ( <LogicalTest>, <ResultIfTrue> [, <ResultIfFalse>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nEither ResultIfTrue or ResultIfFalse expression result, depending on LogicalTest.",
        "COTH": "Syntax:\n                    COTH ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nReturns the hyperbolic cotangent of a hyperbolic angle. ",
        "CURRENCY": "Syntax:\n                    CURRENCY ( <Value> )                 \nReturn Values:\n(Scalar)   A single \nThe value of the expression evaluated and returned as a currency type value.",
        "DIVIDE": "Syntax:\n                    DIVIDE ( <Numerator>, <Denominator> [, <AlternateResult>] )                 \nReturn Values:\n(Scalar)   A single \nResult of the division between Numerator and Denominator, or AlternateResult in case there is a division by zero.",
        "EVEN": "Syntax:\n                    EVEN ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nReturns number rounded up to the nearest even integer. ",
        "FACT": "Syntax:\n                    FACT ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nThe factorial of the argument in a decimal data type.",
        "ATANH": "Syntax:\n                    ATANH ( <Number> )                 \nReturn Values:\n(Scalar)   A single \n",
        "EXP": "Syntax:\n                    EXP ( <Number> )                 \nReturn Values:\n(Scalar)   A single \n",
        "ACOTH": "Syntax:\n                    ACOTH ( <Number> )                 \nReturn Values:\n(Scalar)   A single \n",
        "GCD": "Syntax:\n                    GCD ( <Number1>, <Number2> )                 \nReturn Values:\n(Scalar)   A single \nThe greatest common divisor of two or more integers. ",
        "COSH": "Syntax:\n                    COSH ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nThe hyperbolic cosine of a number. ",
        "LCM": "Syntax:\n                    LCM ( <Number1>, <Number2> )                 \nReturn Values:\n(Scalar)   A single \nReturns the least common multiple of integers. ",
        "ISO.CEILING": "Syntax:\n                    ISO.CEILING ( <Number> [, <Significance>] )                 \nReturn Values:\n(Scalar)   A single value of one these types: \nA number, of the same type as the number argument, rounded as specified. ",
        "LN": "Syntax:\n                    LN ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nThe natural logarithm of the number passed as an argument.",
        "MROUND": "Syntax:\n                    MROUND ( <Number>, <Multiple> )                 \nReturn Values:\n(Scalar)   A single \nRounded number.",
        "MOD": "Syntax:\n                    MOD ( <Number>, <Divisor> )                 \nReturn Values:\n(Scalar)   A single \nAn integer number.",
        "ODD": "Syntax:\n                    ODD ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nReturns number rounded up to the nearest odd integer. ",
        "QUOTIENT": "Syntax:\n                    QUOTIENT ( <Numerator>, <Denominator> )                 \nReturn Values:\n(Scalar)   A single \nReturns only the integer portion of the division result.",
        "PI": "Syntax:\n                    PI (  )                 \nReturn Values:\n(Scalar)   A single \nA decimal number with the value of π, 3.14159265358979, accurate to 15 digits.",
        "INT": "Syntax:\n                    INT ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nAn integer value",
        "DEGREES": "Syntax:\n                    DEGREES ( <Number> )                 \nReturn Values:\n(Scalar)   A single \n",
        "RADIANS": "Syntax:\n                    RADIANS ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nValue of Number in degrees converted to radians.",
        "FLOOR": "Syntax:\n                    FLOOR ( <Number>, <Significance> )                 \nReturn Values:\n(Scalar)   A single \nNumber down to requested significance",
        "ROUNDDOWN": "Syntax:\n                    ROUNDDOWN ( <Number>, <NumberOfDigits> )                 \nReturn Values:\n(Scalar)   A single \nThe rounded number.",
        "LOG10": "Syntax:\n                    LOG10 ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nLogarithm of number to base 10.",
        "SIN": "Syntax:\n                    SIN ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nReturns the sine of the given angle. ",
        "ROUND": "Syntax:\n                    ROUND ( <Number>, <NumberOfDigits> )                 \nReturn Values:\n(Scalar)   A single \nThe rounded number.",
        "SELECTEDMEASURE": "Syntax:\n                    SELECTEDMEASURE (  )                 \nReturn Values:\n(Scalar)   A single value of any type.\nA reference to the measure that is currently in context when the calculation item is evaluated.",
        "RAND": "Syntax:\n                    RAND (  )                 \nReturn Values:\n(Scalar)   A single \nA random number.",
        "ALLSELECTED": "Syntax:\n                    ALLSELECTED (  [<TableNameOrColumnName>] [, <ColumnName> [, <ColumnName> [, … ] ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\n",
        "SIGN": "Syntax:\n                    SIGN ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nThe possible results are: ",
        "SQRTPI": "Syntax:\n                    SQRTPI ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nReturns the square root of (number * pi). ",
        "LOG": "Syntax:\n                    LOG ( <Number> [, <Base>] )                 \nReturn Values:\n(Scalar)   A single \nLogarithm of number to the base specified.",
        "ROUNDUP": "Syntax:\n                    ROUNDUP ( <Number>, <NumberOfDigits> )                 \nReturn Values:\n(Scalar)   A single \nThe rounded number.",
        "TAN": "Syntax:\n                    TAN ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nReturns the tangent of the given angle. ",
        "SQRT": "Syntax:\n                    SQRT ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nSquare root of Number.",
        "SINH": "Syntax:\n                    SINH ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nReturns the hyperbolic sine of a number. ",
        "EARLIEST": "Syntax:\n                    EARLIEST ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single value of any type.\nThe current value of row, from ColumnName, at the outermost row context.",
        "BLANK": "Syntax:\n                    BLANK (  )                 \nReturn Values:\n(Scalar)   A single value of any type.\nThe BLANK value does not have a data type.",
        "ERROR": "Syntax:\n                    ERROR ( <ErrorText> )                 ",
        "RANDBETWEEN": "Syntax:\n                    RANDBETWEEN ( <Bottom>, <Top> )                 \nReturn Values:\n(Scalar)   A single \n",
        "PATHLENGTH": "Syntax:\n                    PATHLENGTH ( <Path> )                 \nReturn Values:\n(Scalar)   A single \n",
        "PATHITEM": "Syntax:\n                    PATHITEM ( <Path>, <Position> [, <Type>] )                 \nReturn Values:\n(Scalar)   A single value of one these types: \n",
        "TANH": "Syntax:\n                    TANH ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nReturns the hyperbolic tangent of a number. ",
        "KEYWORDMATCH": "Syntax:\n                    KEYWORDMATCH ( <MatchExpression>, <Text> )                 \nReturn Values:\n(Scalar)   A single \nReturns TRUE if there is a match between the MatchExpression and Text. ",
        "PATHCONTAINS": "Syntax:\n                    PATHCONTAINS ( <Path>, <Item> )                 \nReturn Values:\n(Scalar)   A single \nA value of TRUE if item exists in Path; otherwise FALSE. ",
        "RELATED": "Syntax:\n                    RELATED ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single value of any type.\nA single value that is related to the current row.",
        "USERELATIONSHIP": "Syntax:\n                    USERELATIONSHIP ( <ColumnName1>, <ColumnName2> )                 ",
        "CROSSFILTER": "Syntax:\n                    CROSSFILTER ( <LeftColumnName>, <RightColumnName>, <CrossFilterType> )                 ",
        "PATH": "Syntax:\n                    PATH ( <ID_ColumnName>, <Parent_ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nA delimited text string containing the identifiers of all the parents to the current identifier. ",
        "PATHITEMREVERSE": "Syntax:\n                    PATHITEMREVERSE ( <Path>, <Position> [, <Type>] )                 \nReturn Values:\n(Scalar)   A single value of one these types: \nThe n-position ascendant in the given path, counting from current to the oldest. ",
        "POWER": "Syntax:\n                    POWER ( <Number>, <Power> )                 \nReturn Values:\n(Scalar)   A single \nThe Number raised to Power.",
        "RELATEDTABLE": "Syntax:\n                    RELATEDTABLE ( <Table> )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table of values.",
        "EARLIER": "Syntax:\n                    EARLIER ( <ColumnName> [, <Number>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nThe current value of row, from ColumnName, at Number of outer evaluation passes. ",
        "CHISQ.DIST": "Syntax:\n                    CHISQ.DIST ( <X>, <Deg_freedom>, <Cumulative> )                 \nReturn Values:\n(Scalar)   A single \nReturns the chi-squared distribution.",
        "CHISQ.DIST.RT": "Syntax:\n                    CHISQ.DIST.RT ( <X>, <Deg_freedom> )                 \nReturn Values:\n(Scalar)   A single \nReturns the right-tailed probability of the chi-squared distribution.",
        "CHISQ.INV": "Syntax:\n                    CHISQ.INV ( <Probability>, <Deg_freedom> )                 \nReturn Values:\n(Scalar)   A single \nReturns the inverse of the left-tailed probability of the chi-squared distribution. ",
        "TRUNC": "Syntax:\n                    TRUNC ( <Number> [, <NumberOfDigits>] )                 \nReturn Values:\n(Scalar)   A single \nThe truncated number.",
        "BETA.DIST": "Syntax:\n                    BETA.DIST ( <X>, <Alpha>, <Beta>, <Cumulative> [, <A>] [, <B>] )                 \nReturn Values:\n(Scalar)   A single \nReturns the beta distribution. ",
        "BETA.INV": "Syntax:\n                    BETA.INV ( <Probability>, <Alpha>, <Beta> [, <A>] [, <B>] )                 \nReturn Values:\n(Scalar)   A single \n",
        "COMBINA": "Syntax:\n                    COMBINA ( <Number>, <Number_chosen> )                 \nReturn Values:\n(Scalar)   A single \nReturns the number of combinations (with repetitions) for a given number of items. ",
        "CONFIDENCE.NORM": "Syntax:\n                    CONFIDENCE.NORM ( <Alpha>, <Standard_dev>, <Size> )                 \nReturn Values:\n(Scalar)   A single \n",
        "CONFIDENCE.T": "Syntax:\n                    CONFIDENCE.T ( <Alpha>, <Standard_dev>, <Size> )                 \nReturn Values:\n(Scalar)   A single \nReturns the confidence interval for a population mean, using a Student’s t distribution. ",
        "COMBIN": "Syntax:\n                    COMBIN ( <Number>, <Number_chosen> )                 \nReturn Values:\n(Scalar)   A single \nReturns the number of combinations for a given number of items. ",
        "EXPON.DIST": "Syntax:\n                    EXPON.DIST ( <X>, <Lambda>, <Cumulative> )                 \nReturn Values:\n(Scalar)   A single \n",
        "GEOMEAN": "Syntax:\n                    GEOMEAN ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nReturn a decimal number with the geometric mean.",
        "GEOMEANX": "Syntax:\n                    GEOMEANX ( <Table>, <Expression> )                 \nReturn Values:\n(Scalar)   A single \nReturn a decimal number with the geometric mean.",
        "MEDIANX": "Syntax:\n                    MEDIANX ( <Table>, <Expression> )                 \nReturn Values:\n(Scalar)   A single \nMedian value",
        "NORM.INV": "Syntax:\n                    NORM.INV ( <Probability>, <Mean>, <Standard_dev> )                 \nReturn Values:\n(Scalar)   A single \nReturns the inverse of the normal cumulative distribution for the specified mean and standard deviation. ",
        "NORM.S.INV": "Syntax:\n                    NORM.S.INV ( <Probability> )                 \nReturn Values:\n(Scalar)   A single \nThe inverse of the standard normal cumulative distribution. The distribution has a mean of zero and a standard deviation of one.",
        "MEDIAN": "Syntax:\n                    MEDIAN ( <Column> )                 \nReturn Values:\n(Scalar)   A single \nMedian value",
        "PERCENTILE.INC": "Syntax:\n                    PERCENTILE.INC ( <Column>, <K> )                 \nReturn Values:\n(Scalar)   A single \nPercentile value.",
        "PERCENTILEX.INC": "Syntax:\n                    PERCENTILEX.INC ( <Table>, <Expression>, <K> )                 \nReturn Values:\n(Scalar)   A single \nPercentile value.",
        "PERCENTILE.EXC": "Syntax:\n                    PERCENTILE.EXC ( <Column>, <K> )                 \nReturn Values:\n(Scalar)   A single \nPercentile value.",
        "CHISQ.INV.RT": "Syntax:\n                    CHISQ.INV.RT ( <Probability>, <Deg_freedom> )                 \nReturn Values:\n(Scalar)   A single \nReturns the inverse of the right-tailed probability of the chi-squared distribution. ",
        "PERMUT": "Syntax:\n                    PERMUT ( <Number>, <Number_chosen> )                 \nReturn Values:\n(Scalar)   A single \nReturns the number of permutations for a given number of objects that can be selected from number objects.",
        "NORM.DIST": "Syntax:\n                    NORM.DIST ( <X>, <Mean>, <Standard_dev>, <Cumulative> )                 \nReturn Values:\n(Scalar)   A single \nThe normal distribution for the specified mean and standard deviation. ",
        "POISSON.DIST": "Syntax:\n                    POISSON.DIST ( <X>, <Mean>, <Cumulative> )                 \nReturn Values:\n(Scalar)   A single \nReturns the Poisson distribution. ",
        "NORM.S.DIST": "Syntax:\n                    NORM.S.DIST ( <Z>, <Cumulative> )                 \nReturn Values:\n(Scalar)   A single \nThe standard normal distribution (has a mean of zero and a standard deviation of one. ",
        "PERCENTILEX.EXC": "Syntax:\n                    PERCENTILEX.EXC ( <Table>, <Expression>, <K> )                 \nReturn Values:\n(Scalar)   A single \nPercentile value.",
        "RANKX": "Syntax:\n                    RANKX ( <Table>, <Expression> [, <Value>] [, <Order>] [, <Ties>] )                 \nReturn Values:\n(Scalar)   A single \nThe rank number of Value among all possible values of Expression evaluated for all rows of Table numbers. ",
        "SAMPLE": "Syntax:\n                    SAMPLE ( <Size>, <Table>, <OrderBy> [, [<Order>] [, <OrderBy> [, [<Order>] [, … ] ] ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table consisting of a sample of Size rows of table or an empty table if Size is 0 (zero) or less. ",
        "STDEV.P": "Syntax:\n                    STDEV.P ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nThe standard deviation of the entire population. ",
        "STDEV.S": "Syntax:\n                    STDEV.S ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nThe standard deviation of a sample population. ",
        "STDEVX.S": "Syntax:\n                    STDEVX.S ( <Table>, <Expression> )                 \nReturn Values:\n(Scalar)   A single \nThe standard deviation of a sample population. ",
        "T.DIST.2T": "Syntax:\n                    T.DIST.2T ( <X>, <Deg_freedom> )                 \nReturn Values:\n(Scalar)   A single \nThe two-tailed Student’s t-distribution.",
        "T.INV.2T": "Syntax:\n                    T.INV.2T ( <Probability>, <Deg_freedom> )                 \nReturn Values:\n(Scalar)   A single \nThe two-tailed inverse of the Student’s t-distribution. ",
        "VAR.P": "Syntax:\n                    VAR.P ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nA number with the variance of the entire population. ",
        "T.INV": "Syntax:\n                    T.INV ( <Probability>, <Deg_freedom> )                 \nReturn Values:\n(Scalar)   A single \nThe left-tailed inverse of the Student’s t-distribution. ",
        "T.DIST": "Syntax:\n                    T.DIST ( <X>, <Deg_freedom>, <Cumulative> )                 \nReturn Values:\n(Scalar)   A single \nThe Student’s left-tailed t-distribution. ",
        "RANK.EQ": "Syntax:\n                    RANK.EQ ( <Value>, <ColumnName> [, <Order>] )                 \nReturn Values:\n(Scalar)   A single \nA number indicating the rank of Value among the numbers in ColumnName. ",
        "T.DIST.RT": "Syntax:\n                    T.DIST.RT ( <X>, <Deg_freedom> )                 \nReturn Values:\n(Scalar)   A single value of any type.\nThe right-tailed Student’s t-distribution.",
        "VARX.S": "Syntax:\n                    VARX.S ( <Table>, <Expression> )                 \nReturn Values:\n(Scalar)   A single \nA number that represents the variance of a sample population. ",
        "ADDMISSINGITEMS": "Syntax:\n                    ADDMISSINGITEMS (  [<ShowAll_ColumnName> [, <ShowAll_ColumnName> [, … ] ] ], <Table> [, <GroupBy_ColumnName> [, [<FilterTable>] [, <GroupBy_ColumnName> [, [<FilterTable>] [, … ] ] ] ] ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\n",
        "CURRENTGROUP": "Syntax:\n                    CURRENTGROUP (  )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\n",
        "DETAILROWS": "Syntax:\n                    DETAILROWS ( <Measure> )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\n",
        "STDEVX.P": "Syntax:\n                    STDEVX.P ( <Table>, <Expression> )                 \nReturn Values:\n(Scalar)   A single \nThe standard deviation of the entire population. ",
        "DISTINCT": "Syntax:\n                    DISTINCT ( <ColumnNameOrTableExpr> )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA column of unique values if the parameter is a single column. If the parameter is a table expression, the result has the same columns and remove only duplicated rows.",
        "EXCEPT": "Syntax:\n                    EXCEPT ( <LeftTable>, <RightTable> )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table that contains the rows of the LeftTable minus all the rows of the RightTable. ",
        "VARX.P": "Syntax:\n                    VARX.P ( <Table>, <Expression> )                 \nReturn Values:\n(Scalar)   A single \nA number with the variance of the entire population. ",
        "FILTERS": "Syntax:\n                    FILTERS ( <ColumnName> )                 \nReturn Values:\n(Table)   A table with a single column.\nA column of unique values.",
        "GENERATE": "Syntax:\n                    GENERATE ( <Table1>, <Table2> )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\n",
        "VAR.S": "Syntax:\n                    VAR.S ( <ColumnName> )                 \nReturn Values:\n(Scalar)   A single \nA number that represents the variance of a sample population. ",
        "GENERATEALL": "Syntax:\n                    GENERATEALL ( <Table1>, <Table2> )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\n",
        "IGNORE": "Syntax:\n                    IGNORE ( <Measure_Expression> )                 ",
        "INTERSECT": "Syntax:\n                    INTERSECT ( <LeftTable>, <RightTable> )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table that contains all the rows in LeftTable that are also in RightTable. ",
        "GENERATESERIES": "Syntax:\n                    GENERATESERIES ( <StartValue>, <EndValue> [, <IncrementValue>] )                 \nReturn Values:\n(Table)   A table with a single column.\n",
        "GROUPBY": "Syntax:\n                    GROUPBY ( <Table> [, <GroupBy_ColumnName> [, [<Name>] [, [<Expression>] [, <GroupBy_ColumnName> [, [<Name>] [, [<Expression>] [, … ] ] ] ] ] ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table with the selected columns for the GroupBy_columnName arguments and the grouped by columns designated by the name arguments. ",
        "NONVISUAL": "Syntax:\n                    NONVISUAL ( <Expression> )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table of values.",
        "ADDCOLUMNS": "Syntax:\n                    ADDCOLUMNS ( <Table>, <Name>, <Expression> [, <Name>, <Expression> [, … ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table with all its original columns and the added ones.",
        "NATURALLEFTOUTERJOIN": "Syntax:\n                    NATURALLEFTOUTERJOIN ( <LeftTable>, <RightTable> )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table which includes only rows from RightTable for which the values in the common columns specified are also present in LeftTable. The table returned will have the common columns from the left table and the other columns from both the tables. ",
        "ROLLUPADDISSUBTOTAL": "Syntax:\n                    ROLLUPADDISSUBTOTAL (  [<GrandtotalFilter>], <GroupBy_ColumnName>, <Name> [, [<GroupLevelFilter>] [, <GroupBy_ColumnName>, <Name> [, [<GroupLevelFilter>] [, … ] ] ] ] )                 ",
        "ROLLUPGROUP": "Syntax:\n                    ROLLUPGROUP ( <GroupBy_ColumnName> [, <GroupBy_ColumnName> [, … ] ] )                 ",
        "NATURALINNERJOIN": "Syntax:\n                    NATURALINNERJOIN ( <LeftTable>, <RightTable> )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table which includes only rows for which the values in the common columns specified are present in both tables. The table returned will have the common columns from the left table and other columns from both the tables. ",
        "ROW": "Syntax:\n                    ROW ( <Name>, <Expression> [, <Name>, <Expression> [, … ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA single row table.",
        "DATATABLE": "Syntax:\n                    DATATABLE ( <name>, <type> [, <name>, <type> [, … ] ], <data> )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table declaring an inline set of values.",
        "SELECTCOLUMNS": "Syntax:\n                    SELECTCOLUMNS ( <Table>, <Name>, <Expression> [, <Name>, <Expression> [, … ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table with the same number of rows as the table specified as the first argument. The returned table has one column for each pair of Name, Expression arguments, and each expression is evaluated in the context of a row from the specified Table argument. ",
        "SUMMARIZE": "Syntax:\n                    SUMMARIZE ( <Table> [, <GroupBy_ColumnName> [, [<Name>] [, [<Expression>] [, <GroupBy_ColumnName> [, [<Name>] [, [<Expression>] [, … ] ] ] ] ] ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table with the selected columns for the GroupBy_ColumnName arguments and the summarized columns designed by the name arguments. ",
        "TOPN": "Syntax:\n                    TOPN ( <N_Value>, <Table> [, <OrderBy_Expression> [, [<Order>] [, <OrderBy_Expression> [, [<Order>] [, … ] ] ] ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table with the top N_value rows of Table or an empty table if N_value is 0 (zero).",
        "TOPNPERLEVEL": "Syntax:\n                    TOPNPERLEVEL ( <Rows>, <Table>, <LevelsDefinition>, <NodesExpanded>, <LevelsBoundaries>, <RestartIndicatorColumnName> )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\n",
        "CROSSJOIN": "Syntax:\n                    CROSSJOIN ( <Table> [, <Table> [, … ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table that contains the Cartesian product of all rows from all tables in the arguments.",
        "TREATAS": "Syntax:\n                    TREATAS ( <Expression>, <ColumnName> [, <ColumnName> [, … ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table that contains all the rows in column(s) that are also in Expression.",
        "SUBSTITUTEWITHINDEX": "Syntax:\n                    SUBSTITUTEWITHINDEX ( <Table>, <Name>, <SemiJoinIndexTable>, <Expression> [, [<Order>] [, <Expression> [, [<Order>] [, … ] ] ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table which includes only those values present in the indexColumnsTable table and which has an index column instead of all columns present (by name) in the indexColumnsTable table. ",
        "UNION": "Syntax:\n                    UNION ( <Table>, <Table> [, <Table> [, … ] ] )                \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\nA table that contains all the rows from each of the table expressions. ",
        "ROLLUPISSUBTOTAL": "Syntax:\n                    ROLLUPISSUBTOTAL (  [<GrandtotalFilter>], <GroupBy_ColumnName>, <IsSubtotal_ColumnName> [, [<GroupLevelFilter>] [, <GroupBy_ColumnName>, <IsSubtotal_ColumnName> [, [<GroupLevelFilter>] [, … ] ] ] ] )                 ",
        "COMBINEVALUES": "Syntax:\n                    COMBINEVALUES ( <Delimiter>, <Expression1>, <Expression2> [, <Expression2> [, … ] ] )                 \nReturn Values:\n(Scalar)   A single \nThe concatenated string. ",
        "CONCATENATE": "Syntax:\n                    CONCATENATE ( <Text1>, <Text2> )                 \nReturn Values:\n(Scalar)   A single \nThe concatenated string. ",
        "EXACT": "Syntax:\n                    EXACT ( <Text1>, <Text2> )                 \nReturn Values:\n(Scalar)   A single \n",
        "SUMMARIZECOLUMNS": "Syntax:\n                    SUMMARIZECOLUMNS (  [<GroupBy_ColumnName> [, [<FilterTable>] [, [<Name>] [, [<Expression>] [, <GroupBy_ColumnName> [, [<FilterTable>] [, [<Name>] [, [<Expression>] [, … ] ] ] ] ] ] ] ] ] )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\n",
        "FIXED": "Syntax:\n                    FIXED ( <Number> [, <Decimals>] [, <NoCommas>] )                 \nReturn Values:\n(Scalar)   A single \nA number represented as text. ",
        "LEFT": "Syntax:\n                    LEFT ( <Text> [, <NumberOfCharacters>] )                 \nReturn Values:\n(Scalar)   A single \nA text string. ",
        "FORMAT": "Syntax:\n                    FORMAT ( <Value>, <Format> )                 \nReturn Values:\n(Scalar)   A single \n",
        "ACOSH": "Syntax:\n                    ACOSH ( <Number> )                 \nReturn Values:\n(Scalar)   A single \n",
        "CONCATENATEX": "Syntax:\n                    CONCATENATEX ( <Table>, <Expression> [, <Delimiter>] [, <OrderBy_Expression> [, [<Order>] [, <OrderBy_Expression> [, [<Order>] [, … ] ] ] ] ] )                 \nReturn Values:\n(Scalar)   A single \nA text string with the concatenated values.",
        "LEN": "Syntax:\n                    LEN ( <Text> )                 \nReturn Values:\n(Scalar)   A single \nThe number of characters in the text string. ",
        "REPT": "Syntax:\n                    REPT ( <Text>, <NumberOfTimes> )                 \nReturn Values:\n(Scalar)   A single \nA string containing the changes.",
        "ROLLUP": "Syntax:\n                    ROLLUP ( <GroupBy_ColumnName> [, <GroupBy_ColumnName> [, … ] ] )                 ",
        "SEARCH": "Syntax:\n                    SEARCH ( <FindText>, <WithinText> [, <StartPosition>] [, <NotFoundValue>] )                 \nReturn Values:\n(Scalar)   A single \nThe number of the starting position of the first text string from the first character of the second text string. ",
        "SUBSTITUTE": "Syntax:\n                    SUBSTITUTE ( <Text>, <OldText>, <NewText> [, <InstanceNumber>] )                 \nReturn Values:\n(Scalar)   A single \nThe modified string.",
        "TRIM": "Syntax:\n                    TRIM ( <Text> )                 \nReturn Values:\n(Scalar)   A single \nThe string with spaces removed. ",
        "UNICODE": "Syntax:\n                    UNICODE ( <Text> )                 \nReturn Values:\n(Scalar)   A single \nA numeric code for the first character in a text string. ",
        "VALUE": "Syntax:\n                    VALUE ( <Text> )                 \nReturn Values:\n(Scalar)   A single \nThe converted number in decimal data type. ",
        "UNICHAR": "Syntax:\n                    UNICHAR ( <Number> )                 \nReturn Values:\n(Scalar)   A single \nA character represented by the Unicode number.",
        "CLOSINGBALANCEMONTH": "Syntax:\n                    CLOSINGBALANCEMONTH ( <Expression>, <Dates> [, <Filter>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar value that represents the expression evaluated at the last date of the month in the current context.",
        "MID": "Syntax:\n                    MID ( <Text>, <StartPosition>, <NumberOfCharacters> )                 \nReturn Values:\n(Scalar)   A single \nA string of text of the specified length.",
        "LOWER": "Syntax:\n                    LOWER ( <Text> )                 \nReturn Values:\n(Scalar)   A single \nText in lowercase.",
        "CLOSINGBALANCEYEAR": "Syntax:\n                    CLOSINGBALANCEYEAR ( <Expression>, <Dates> [, <Filter>] [, <YearEndDate>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\n",
        "CLOSINGBALANCEQUARTER": "Syntax:\n                    CLOSINGBALANCEQUARTER ( <Expression>, <Dates> [, <Filter>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\n",
        "DATEADD": "Syntax:\n                    DATEADD ( <Dates>, <NumberOfIntervals>, <Interval> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column of date values.",
        "REPLACE": "Syntax:\n                    REPLACE ( <OldText>, <StartPosition>, <NumberOfCharacters>, <NewText> )                 \nReturn Values:\n(Scalar)   A single \nThe resulting string after applying the replacements.",
        "DATESBETWEEN": "Syntax:\n                    DATESBETWEEN ( <Dates>, <StartDate>, <EndDate> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column of date values. ",
        "DATESINPERIOD": "Syntax:\n                    DATESINPERIOD ( <Dates>, <StartDate>, <NumberOfIntervals>, <Interval> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column of unique date values.",
        "UPPER": "Syntax:\n                    UPPER ( <Text> )                 \nReturn Values:\n(Scalar)   A single \nText in uppercase.",
        "ENDOFMONTH": "Syntax:\n                    ENDOFMONTH ( <Dates> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column and single row with a date value.",
        "FIRSTDATE": "Syntax:\n                    FIRSTDATE ( <Dates> )                 \nReturn Values:\n(Table)   A table with a single column.\n",
        "FIRSTNONBLANK": "Syntax:\n                    FIRSTNONBLANK ( <ColumnName>, <Expression> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column and single row with the computed first value. ",
        "LASTNONBLANK": "Syntax:\n                    LASTNONBLANK ( <ColumnName>, <Expression> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column and single row with the computed last value.",
        "DATESMTD": "Syntax:\n                    DATESMTD ( <Dates> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column of date values.",
        "FIRSTNONBLANKVALUE": "Syntax:\n                    FIRSTNONBLANKVALUE ( <ColumnName>, <Expression> )                 \nReturn Values:\n(Scalar)   A single value of any type.\nThe first non-blank value evaluated by the Expression iterating ColumnName.",
        "FIND": "Syntax:\n                    FIND ( <FindText>, <WithinText> [, <StartPosition>] [, <NotFoundValue>] )                 \nReturn Values:\n(Scalar)   A single \nNumber that shows the starting point of the text string you want to find. ",
        "LASTDATE": "Syntax:\n                    LASTDATE ( <Dates> )                 \nReturn Values:\n(Table)   A table with a single column.\n",
        "RIGHT": "Syntax:\n                    RIGHT ( <Text> [, <NumberOfCharacters>] )                 \nReturn Values:\n(Scalar)   A single \nA text string containing the specified right-most characters. ",
        "TOPNSKIP": "Syntax:\n                    TOPNSKIP ( <Rows>, <Skip>, <Table> [, <OrderBy_Expression> [, [<Order>] [, <OrderBy_Expression> [, [<Order>] [, … ] ] ] ] ] )                \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\n",
        "DATESQTD": "Syntax:\n                    DATESQTD ( <Dates> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column of date values.",
        "NEXTQUARTER": "Syntax:\n                    NEXTQUARTER ( <Dates> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column of date values.",
        "NEXTMONTH": "Syntax:\n                    NEXTMONTH ( <Dates> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column of date values.",
        "OPENINGBALANCEMONTH": "Syntax:\n                    OPENINGBALANCEMONTH ( <Expression>, <Dates> [, <Filter>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar value that represents the expression evaluated at the first date of the month in the current context.",
        "NEXTYEAR": "Syntax:\n                    NEXTYEAR ( <Dates> [, <YearEndDate>] )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column of date values.",
        "OPENINGBALANCEQUARTER": "Syntax:\n                    OPENINGBALANCEQUARTER ( <Expression>, <Dates> [, <Filter>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar value that represents the expression evaluated at the first date of the quarter in the current context.",
        "OPENINGBALANCEYEAR": "Syntax:\n                    OPENINGBALANCEYEAR ( <Expression>, <Dates> [, <Filter>] [, <YearEndDate>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar value that represents the expression evaluated at the first date of the quarter in the current context.",
        "DATESYTD": "Syntax:\n                    DATESYTD ( <Dates> [, <YearEndDate>] )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column of date values.",
        "PARALLELPERIOD": "Syntax:\n                    PARALLELPERIOD ( <Dates>, <NumberOfIntervals>, <Interval> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column of date values.",
        "VALUES": "Syntax:\n                    VALUES ( <TableNameOrColumnName> )                 \nReturn Values:\n(Table)   An entire table or a table with one or more columns.\n",
        "ENDOFYEAR": "Syntax:\n                    ENDOFYEAR ( <Dates> [, <YearEndDate>] )                 \nReturn Values:\n(Table)   A table with a single column.\n",
        "PREVIOUSMONTH": "Syntax:\n                    PREVIOUSMONTH ( <Dates> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column of date values.",
        "SAMEPERIODLASTYEAR": "Syntax:\n                    SAMEPERIODLASTYEAR ( <Dates> )                 \nReturn Values:\n(Table)   A table with a single column.\nThe corresponding dates in the previous year.",
        "PREVIOUSQUARTER": "Syntax:\n                    PREVIOUSQUARTER ( <Dates> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column of date values.",
        "PREVIOUSYEAR": "Syntax:\n                    PREVIOUSYEAR ( <Dates> [, <YearEndDate>] )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column of date values.",
        "NEXTDAY": "Syntax:\n                    NEXTDAY ( <Dates> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column of date values.",
        "ENDOFQUARTER": "Syntax:\n                    ENDOFQUARTER ( <Dates> )                 \nReturn Values:\n(Table)   A table with a single column.\n",
        "LASTNONBLANKVALUE": "Syntax:\n                    LASTNONBLANKVALUE ( <ColumnName>, <Expression> )                 \nReturn Values:\n(Scalar)   A single value of any type.\nThe last non-blank value evaluated by the Expression iterating ColumnName.",
        "STARTOFQUARTER": "Syntax:\n                    STARTOFQUARTER ( <Dates> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column and single row with a date value.",
        "PREVIOUSDAY": "Syntax:\n                    PREVIOUSDAY ( <Dates> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column of date values.",
        "TOTALMTD": "Syntax:\n                    TOTALMTD ( <Expression>, <Dates> [, <Filter>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar value that represents the Expression evaluated for the Dates in the current month-to-date, given the dates in Dates. ",
        "TOTALYTD": "Syntax:\n                    TOTALYTD ( <Expression>, <Dates> [, <Filter>] [, <YearEndDate>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar value that represents the Expression evaluated for the Dates in the current year-to-date, given the dates in Dates. ",
        "STARTOFYEAR": "Syntax:\n                    STARTOFYEAR ( <Dates> [, <YearEndDate>] )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column and single row with a date value.",
        "STARTOFMONTH": "Syntax:\n                    STARTOFMONTH ( <Dates> )                 \nReturn Values:\n(Table)   A table with a single column.\nA table containing a single column and single row with a date value.",
        "TOTALQTD": "Syntax:\n                    TOTALQTD ( <Expression>, <Dates> [, <Filter>] )                 \nReturn Values:\n(Scalar)   A single value of any type.\nA scalar value that represents the Expression evaluated for the Dates in the current quarter-to-date, given the dates in Dates. "
    },
    {
        "Aggregation": [
            "APPROXIMATEDISTINCTCOUNT",
            "AVERAGE",
            "AVERAGEA",
            "AVERAGEX",
            "COUNT",
            "COUNTA",
            "COUNTAX",
            "COUNTBLANK",
            "COUNTROWS",
            "COUNTX",
            "DISTINCTCOUNT",
            "DISTINCTCOUNTNOBLANK",
            "MAX",
            "MAXA",
            "MAXX",
            "MIN",
            "MINA",
            "MINX",
            "PRODUCT",
            "PRODUCTX",
            "SUM",
            "SUMX"
        ],
        "Date and Time": [
            "CALENDAR",
            "CALENDARAUTO",
            "DATE",
            "DATEDIFF",
            "DATEVALUE",
            "DAY",
            "EDATE",
            "EOMONTH",
            "HOUR",
            "MINUTE",
            "MONTH",
            "NOW",
            "QUARTER",
            "SECOND",
            "TIME",
            "TIMEVALUE",
            "TODAY",
            "UTCNOW",
            "UTCTODAY",
            "WEEKDAY",
            "WEEKNUM",
            "YEAR",
            "YEARFRAC"
        ],
        "Filter": [
            "ALL",
            "ALLCROSSFILTERED",
            "ALLEXCEPT",
            "ALLNOBLANKROW",
            "ALLSELECTED",
            "CALCULATE",
            "CALCULATETABLE",
            "FILTER",
            "KEEPFILTERS",
            "LOOKUPVALUE",
            "REMOVEFILTERS",
            "SELECTEDVALUE"
        ],
        "Financial": [
            "ACCRINT",
            "ACCRINTM",
            "AMORDEGRC",
            "AMORLINC",
            "COUPDAYBS",
            "COUPDAYS",
            "COUPDAYSNC",
            "COUPNCD",
            "COUPNUM",
            "COUPPCD",
            "CUMIPMT",
            "CUMPRINC",
            "DB",
            "DDB",
            "DISC",
            "DOLLARDE",
            "DOLLARFR",
            "DURATION",
            "EFFECT",
            "FV",
            "INTRATE",
            "IPMT",
            "ISPMT",
            "MDURATION",
            "NOMINAL",
            "NPER",
            "ODDFPRICE",
            "ODDFYIELD",
            "ODDLPRICE",
            "ODDLYIELD",
            "PDURATION",
            "PMT",
            "PPMT",
            "PRICE",
            "PRICEDISC",
            "PRICEMAT",
            "PV",
            "RATE",
            "RECEIVED",
            "RRI",
            "SLN",
            "SYD",
            "TBILLEQ",
            "TBILLPRICE",
            "TBILLYIELD",
            "VDB",
            "XIRR",
            "XNPV",
            "YIELD",
            "YIELDDISC",
            "YIELDMAT"
        ],
        "Information": [
            "CONTAINS",
            "CONTAINSROW",
            "CONTAINSSTRING",
            "CONTAINSSTRINGEXACT",
            "CUSTOMDATA",
            "HASONEFILTER",
            "HASONEVALUE",
            "ISAFTER",
            "ISBLANK",
            "ISCROSSFILTERED",
            "ISEMPTY",
            "ISERROR",
            "ISEVEN",
            "ISFILTERED",
            "ISINSCOPE",
            "ISLOGICAL",
            "ISNONTEXT",
            "ISNUMBER",
            "ISODD",
            "ISONORAFTER",
            "ISSELECTEDMEASURE",
            "ISSUBTOTAL",
            "ISTEXT",
            "SELECTEDMEASURE",
            "SELECTEDMEASUREFORMATSTRING",
            "SELECTEDMEASURENAME",
            "USERCULTURE",
            "USERNAME",
            "USEROBJECTID",
            "USERPRINCIPALNAME"
        ],
        "Logical": [
            "AND",
            "COALESCE",
            "FALSE",
            "IF",
            "IF.EAGER",
            "IFERROR",
            "NOT",
            "OR",
            "SWITCH",
            "TRUE"
        ],
        "Math and Trig": [
            "ABS",
            "ACOS",
            "ACOSH",
            "ACOT",
            "ACOTH",
            "ASIN",
            "ASINH",
            "ATAN",
            "ATANH",
            "CEILING",
            "CONVERT",
            "COS",
            "COSH",
            "COT",
            "COTH",
            "CURRENCY",
            "DEGREES",
            "DIVIDE",
            "EVEN",
            "EXP",
            "FACT",
            "FLOOR",
            "GCD",
            "INT",
            "ISO.CEILING",
            "LCM",
            "LN",
            "LOG",
            "LOG10",
            "MOD",
            "MROUND",
            "ODD",
            "PI",
            "POWER",
            "QUOTIENT",
            "RADIANS",
            "RAND",
            "RANDBETWEEN",
            "ROUND",
            "ROUNDDOWN",
            "ROUNDUP",
            "SIGN",
            "SIN",
            "SINH",
            "SQRT",
            "SQRTPI",
            "TAN",
            "TANH",
            "TRUNC"
        ],
        "Other": [
            "BLANK",
            "EARLIER",
            "EARLIEST",
            "ERROR",
            "KEYWORDMATCH"
        ],
        "Parent-child": [
            "PATH",
            "PATHCONTAINS",
            "PATHITEM",
            "PATHITEMREVERSE",
            "PATHLENGTH"
        ],
        "Relationships management": [
            "CROSSFILTER",
            "RELATED",
            "RELATEDTABLE",
            "USERELATIONSHIP"
        ],
        "Statistical": [
            "BETA.DIST",
            "BETA.INV",
            "CHISQ.DIST",
            "CHISQ.DIST.RT",
            "CHISQ.INV",
            "CHISQ.INV.RT",
            "COMBIN",
            "COMBINA",
            "CONFIDENCE.NORM",
            "CONFIDENCE.T",
            "EXPON.DIST",
            "GEOMEAN",
            "GEOMEANX",
            "MEDIAN",
            "MEDIANX",
            "NORM.DIST",
            "NORM.INV",
            "NORM.S.DIST",
            "NORM.S.INV",
            "PERCENTILE.EXC",
            "PERCENTILE.INC",
            "PERCENTILEX.EXC",
            "PERCENTILEX.INC",
            "PERMUT",
            "POISSON.DIST",
            "RANK.EQ",
            "RANKX",
            "SAMPLE",
            "STDEV.P",
            "STDEV.S",
            "STDEVX.P",
            "STDEVX.S",
            "T.DIST",
            "T.DIST.2T",
            "T.DIST.RT",
            "T.INV",
            "T.INV.2T",
            "VAR.P",
            "VAR.S",
            "VARX.P",
            "VARX.S"
        ],
        "Table manipulation": [
            "ADDCOLUMNS",
            "ADDMISSINGITEMS",
            "CROSSJOIN",
            "CURRENTGROUP",
            "DATATABLE",
            "DETAILROWS",
            "DISTINCT",
            "EXCEPT",
            "FILTERS",
            "GENERATE",
            "GENERATEALL",
            "GENERATESERIES",
            "GROUPBY",
            "IGNORE",
            "INTERSECT",
            "NATURALINNERJOIN",
            "NATURALLEFTOUTERJOIN",
            "NONVISUAL",
            "ROLLUP",
            "ROLLUPADDISSUBTOTAL",
            "ROLLUPGROUP",
            "ROLLUPISSUBTOTAL",
            "ROW",
            "SELECTCOLUMNS",
            "SUBSTITUTEWITHINDEX",
            "SUMMARIZE",
            "SUMMARIZECOLUMNS",
            "TOPN",
            "TOPNPERLEVEL",
            "TOPNSKIP",
            "TREATAS",
            "UNION",
            "VALUES"
        ],
        "Text": [
            "COMBINEVALUES",
            "CONCATENATE",
            "CONCATENATEX",
            "EXACT",
            "FIND",
            "FIXED",
            "FORMAT",
            "LEFT",
            "LEN",
            "LOWER",
            "MID",
            "REPLACE",
            "REPT",
            "RIGHT",
            "SEARCH",
            "SUBSTITUTE",
            "TRIM",
            "UNICHAR",
            "UNICODE",
            "UPPER",
            "VALUE"
        ],
        "Time Intelligence": [
            "CLOSINGBALANCEMONTH",
            "CLOSINGBALANCEQUARTER",
            "CLOSINGBALANCEYEAR",
            "DATEADD",
            "DATESBETWEEN",
            "DATESINPERIOD",
            "DATESMTD",
            "DATESQTD",
            "DATESYTD",
            "ENDOFMONTH",
            "ENDOFQUARTER",
            "ENDOFYEAR",
            "FIRSTDATE",
            "FIRSTNONBLANK",
            "FIRSTNONBLANKVALUE",
            "LASTDATE",
            "LASTNONBLANK",
            "LASTNONBLANKVALUE",
            "NEXTDAY",
            "NEXTMONTH",
            "NEXTQUARTER",
            "NEXTYEAR",
            "OPENINGBALANCEMONTH",
            "OPENINGBALANCEQUARTER",
            "OPENINGBALANCEYEAR",
            "PARALLELPERIOD",
            "PREVIOUSDAY",
            "PREVIOUSMONTH",
            "PREVIOUSQUARTER",
            "PREVIOUSYEAR",
            "SAMEPERIODLASTYEAR",
            "STARTOFMONTH",
            "STARTOFQUARTER",
            "STARTOFYEAR",
            "TOTALMTD",
            "TOTALQTD",
            "TOTALYTD"
        ]
    }
]